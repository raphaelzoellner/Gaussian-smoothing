for(i in -k:k){
for(j in -k:k){
len <- norm(c(i,j), type="2")
if(len <= k && len > 0)
{
#uniCircle <- cbind(uniCircle, c(i,j))
#umkreisj <- c(umkreisj,j)
uniI <- c(uniI, i)
uniJ <- c(uniJ, j)
}
}
}
newVals <- matrix(nrow = dim(vals)[1], ncol = dim(vals)[2])
for(i in 1:dim(vals)[1])
{
for(j in 1:dim(vals)[2])
{
circleI <- uniI+i
circleJ <- uniJ+j
list <- numeric(0)
for(k in 1:length(circleI))
{
if(circleI[k]>0 && circleJ[k]>0 && circleI[k]<=dim(vals)[1] && circleJ[k]<=dim(vals)[2]){
list <- c(list,vals[circleI[k],circleJ[k]])
}
}
newVals[i,j] <- mean(list)
}
}
newVals
}
newMatrix <- smooth2(imageMatrix,3)
smooth2 <- function(vals,k){
#uniCircle <- c(0,0)
#umkreisj <- numeric(1)
uniI <- 0
uniJ <- 0
for(i in -k:k){
for(j in -k:k){
len <- max(abs(i),abs(j))#norm(c(i,j), type="2")
if(len <= k && len > 0)
{
#uniCircle <- cbind(uniCircle, c(i,j))
#umkreisj <- c(umkreisj,j)
uniI <- c(uniI, i)
uniJ <- c(uniJ, j)
}
}
}
newVals <- matrix(nrow = dim(vals)[1], ncol = dim(vals)[2])
for(i in 1:dim(vals)[1])
{
for(j in 1:dim(vals)[2])
{
circleI <- uniI+i
circleJ <- uniJ+j
list <- numeric(0)
for(k in 1:length(circleI))
{
if(circleI[k]>0 && circleJ[k]>0 && circleI[k]<=dim(vals)[1] && circleJ[k]<=dim(vals)[2]){
list <- c(list,vals[circleI[k],circleJ[k]])
}
}
newVals[i,j] <- mean(list)
}
}
newVals
}
newMatrix <- smooth2(imageMatrix,3)
max(1,3)
max(abs(-3),abs(2))
newMatrix <- smooth2(imageMatrix,1)
newimg <- make.image(newMatrix)
show.image(newimg)
newMatrix <- smooth2(imageMatrix,2)
newimg <- make.image(newMatrix)
show.image(newimg)
#Einbinden der library bmp
#install.packages("bmp")
library(bmp)
#install.packages("pixmap")
library(pixmap)
#install.packages("adimpro")
library(adimpro)
#Read noisyimage
prc <- pixmapGrey(read.bmp("noisyimage.bmp"))
imageMatrix <- prc@grey
image <- make.image(imageMatrix)
show.image(image)
#Funktion zum Glaetten einer Matrix mit der Methode der naechsten Nachbarn im Umkreis mit Radius k
smooth2 <- function(vals,k){
#uniCircle <- c(0,0)
#umkreisj <- numeric(1)
uniI <- 0
uniJ <- 0
for(i in -k:k){
for(j in -k:k){
len <- max(abs(i),abs(j))#norm(c(i,j), type="2")
if(len <= k && len > 0)
{
#uniCircle <- cbind(uniCircle, c(i,j))
#umkreisj <- c(umkreisj,j)
uniI <- c(uniI, i)
uniJ <- c(uniJ, j)
}
}
}
newVals <- matrix(nrow = dim(vals)[1], ncol = dim(vals)[2])
for(i in 1:dim(vals)[1])
{
for(j in 1:dim(vals)[2])
{
circleI <- uniI+i
circleJ <- uniJ+j
list <- numeric(0)
for(k in 1:length(circleI))
{
if(circleI[k]>0 && circleJ[k]>0 && circleI[k]<=dim(vals)[1] && circleJ[k]<=dim(vals)[2]){
list <- c(list,vals[circleI[k],circleJ[k]])
}
}
newVals[i,j] <- mean(list)
}
}
newVals
}
image <- make.image(t(imageMatrix))
show.image(image)
image <- make.image(imageMatrix)
show.image(image)
newMatrix <- smooth2(imageMatrix,8)
newimg <- make.image(newMatrix)
show.image(newimg)
prc <- pixmapGrey(read.bmp("noisyimage2.bmp"))
imageMatrix <- prc@grey
image <- make.image(imageMatrix)
show.image(image)
#Funktion zum Glaetten einer Matrix mit der Methode der naechsten Nachbarn im Umkreis mit Radius k
smooth2 <- function(vals,k){
#uniCircle <- c(0,0)
#umkreisj <- numeric(1)
uniI <- 0
uniJ <- 0
for(i in -k:k){
for(j in -k:k){
len <- max(abs(i),abs(j))#norm(c(i,j), type="2")
if(len <= k && len > 0)
{
#uniCircle <- cbind(uniCircle, c(i,j))
#umkreisj <- c(umkreisj,j)
uniI <- c(uniI, i)
uniJ <- c(uniJ, j)
}
}
}
newVals <- matrix(nrow = dim(vals)[1], ncol = dim(vals)[2])
for(i in 1:dim(vals)[1])
{
for(j in 1:dim(vals)[2])
{
circleI <- uniI+i
circleJ <- uniJ+j
list <- numeric(0)
for(k in 1:length(circleI))
{
if(circleI[k]>0 && circleJ[k]>0 && circleI[k]<=dim(vals)[1] && circleJ[k]<=dim(vals)[2]){
list <- c(list,vals[circleI[k],circleJ[k]])
}
}
newVals[i,j] <- mean(list)
}
}
newVals
}
newMatrix <- smooth2(imageMatrix,8)
newimg <- make.image(newMatrix)
show.image(newimg)
newMatrix <- smooth2(imageMatrix,6
newMatrix <- smooth2(imageMatrix,6
newMatrix <- smooth2(imageMatrix,6)
newimg <- make.image(newMatrix)
show.image(newimg)
show.image(newimg)
hi <- hist(vals, breaks = 11, plot=FALSE)
#Einlesen der Daten
vals <- scan(file = "http://www.math.hu-berlin.de/~bibinger/Praktikum%202012/snowfall.txt", what = double(), nmax = 63)
#Plot der empirischen Verteilungsfunktion
plot(ecdf(vals))
windows(8,6, rescale="fixed")
#Vermutung: multimodal 3Moden, nahezu symmetrisch um 80 bzw. leicht linksschief
hi <- hist(vals, breaks = 11, plot=FALSE)
hi <- hist(vals, breaks = 11, plot=FALSE)
hi <- hist(vals, breaks = 11, plot=FALSE)
#Plot Histogramm, EpanechnikovschÃ¤tzer mit 3 Bandbreiten
jpeg(filename='output/snowfall_epach.jpg', width=640, height=480, units = "px", type = c("windows", "cairo"), quality=100)
hist(vals, breaks = 11, freq = FALSE, col = "grey", main='Histogram of snowfall', sub='Epanechnikovestimator', ylim=c(0,0.022), xlim=c(10, 140))
lines(density(vals, bw=3, kernel = "epanechnikov"), col = "red", lw=2)
lines(density(vals, bw=5, kernel = "epanechnikov"), col = "blue", lw=2)
lines(density(vals, bw="nrd0", kernel = "epanechnikov"), col = "green", lw=2)
hi <- hist(vals, breaks = 11, plot=FALSE)
#Vermutung: multimodal 3Moden, nahezu symmetrisch um 80 bzw. leicht linksschief
hi <- hist(vals, breaks = 11, plot=FALSE)
#Vermutung: multimodal 3Moden, nahezu symmetrisch um 80 bzw. leicht linksschief
jpeg(filename='output/snowfall_epach.jpg', width=640, height=480, units = "px", type = c("windows", "cairo"), quality=100)
hist(vals, breaks = 11, freq = FALSE, col = "grey", main='Histogram of snowfall', sub='Epanechnikovestimator', ylim=c(0,0.022), xlim=c(10, 140))
lines(density(vals, bw=3, kernel = "epanechnikov"), col = "red", lw=2)
lines(density(vals, bw=5, kernel = "epanechnikov"), col = "blue", lw=2)
lines(density(vals, bw="nrd0", kernel = "epanechnikov"), col = "green", lw=2)
legend(18, 0.021, legend=c("Standard", "bw = 5", "bw = 3"), col=c("green", "blue", "red"), lwd=3)
dev.off()
#Plot Histogramm, GaussianschÃ¤tzer mit 3 Bandbreiten
jpeg(filename='output/snowfall_gausian.jpg', width=640, height=480, units = "px", type = c("windows", "cairo"), quality=100)
hist(vals, breaks = 11, freq = FALSE, col = "grey", main='Histogram of snowfall', sub='Gausianestimator', ylim=c(0,0.022), xlim=c(10, 140))
lines(density(vals, bw="nrd0", kernel = "gaussian"), col = "green", lw=2)
lines(density(vals, bw=5, kernel = "gaussian"), col = "blue", lw=2)
lines(density(vals, bw=3, kernel = "gaussian"), col = "red", lw=2)
legend(18, 0.021, legend=c("Standard", "bw = 5", "bw = 3"), col=c("green", "blue", "red"), lwd=3)
dev.off()
windows(8,6, rescale="fixed")
#Vermutung: multimodal 3Moden, nahezu symmetrisch um 80 bzw. leicht linksschief
#hi <- hist(vals, breaks = 11, plot=FALSE)
#Plot Histogramm, EpanechnikovschÃ¤tzer mit 3 Bandbreiten
jpeg(filename='output/snowfall_epach.jpg', width=640, height=480, units = "px", type = c("windows", "cairo"), quality=100)
hist(vals, breaks = 11, freq = FALSE, col = "grey", main='Histogram of snowfall', sub='Epanechnikovestimator', ylim=c(0,0.022), xlim=c(10, 140))
lines(density(vals, bw=3, kernel = "epanechnikov"), col = "red", lw=2)
lines(density(vals, bw=5, kernel = "epanechnikov"), col = "blue", lw=2)
lines(density(vals, bw="nrd0", kernel = "epanechnikov"), col = "green", lw=2)
legend(18, 0.021, legend=c("Standard", "bw = 5", "bw = 3"), col=c("green", "blue", "red"), lwd=3)
dev.off()
#Plot Histogramm, GaussianschÃ¤tzer mit 3 Bandbreiten
jpeg(filename='output/snowfall_gausian.jpg', width=640, height=480, units = "px", type = c("windows", "cairo"), quality=100)
hist(vals, breaks = 11, freq = FALSE, col = "grey", main='Histogram of snowfall', sub='Gausianestimator', ylim=c(0,0.022), xlim=c(10, 140))
lines(density(vals, bw="nrd0", kernel = "gaussian"), col = "green", lw=2)
lines(density(vals, bw=5, kernel = "gaussian"), col = "blue", lw=2)
lines(density(vals, bw=3, kernel = "gaussian"), col = "red", lw=2)
legend(18, 0.021, legend=c("Standard", "bw = 5", "bw = 3"), col=c("green", "blue", "red"), lwd=3)
dev.off()
#Plot Histogramm, EpanechnikovschÃ¤tzer mit 3 Bandbreiten
jpeg(filename='output/snowfall_epach.jpg', width=640, height=480, units = "px", type = c("windows", "cairo"), quality=100)
hist(vals, breaks = 11, freq = FALSE, col = "grey", main='Histogram of snowfall', sub='Epanechnikovestimator', ylim=c(0,0.022), xlim=c(10, 140))
lines(density(vals, bw=3, kernel = "epanechnikov"), col = "red", lw=2)
lines(density(vals, bw=5, kernel = "epanechnikov"), col = "blue", lw=2)
lines(density(vals, bw="nrd0", kernel = "epanechnikov"), col = "green", lw=2)
legend(18, 0.021, legend=c("Standard", "bw = 5", "bw = 3"), col=c("green", "blue", "red"), lwd=3)
jpeg(filename='output/snowfall_epach.jpg', width=640, height=480, units = "px", type = c("windows", "cairo"), quality=100)
hist(vals, breaks = 11, freq = FALSE, col = "grey", main='Histogram of snowfall', sub='Epanechnikovestimator', ylim=c(0,0.022), xlim=c(10, 140))
lines(density(vals, bw=3, kernel = "epanechnikov"), col = "red", lw=2)
lines(density(vals, bw=5, kernel = "epanechnikov"), col = "blue", lw=2)
lines(density(vals, bw="nrd0", kernel = "epanechnikov"), col = "green", lw=2)
plot(ecdf(vals))
#hi <- hist(vals, breaks = 11, plot=FALSE)
#Plot Histogramm, Epanechnikovschaetzer mit 3 Bandbreiten
jpeg(filename='output/snowfall_epach.jpg', width=640, height=480, units = "px", type = c("windows", "cairo"), quality=100)
hist(vals, breaks = 11, freq = FALSE, col = "grey", main='Histogram of snowfall', sub='Epanechnikovestimator', ylim=c(0,0.022), xlim=c(10, 140))
lines(density(vals, bw=3, kernel = "epanechnikov"), col = "red", lw=2)
hist(vals, breaks = 11, freq = FALSE, col = "grey", main='Histogram of snowfall', sub='Epanechnikovestimator', ylim=c(0,0.022), xlim=c(10, 140))
hi <- hist(vals, breaks = 11, plot=FALSE)
#Plot Histogramm, Epanechnikovschaetzer mit 3 Bandbreiten
jpeg(filename='output/snowfall_epach.jpg', width=640, height=480, units = "px", type = c("windows", "cairo"), quality=100)
hist(vals, breaks = 11, freq = FALSE, col = "grey", main='Histogram of snowfall', sub='Epanechnikovestimator', ylim=c(0,0.022), xlim=c(10, 140))
plot(ecdf(vals))
jpeg(filename='output/snowfall_epach.jpg', width=640, height=480, units = "px", type = c("windows", "cairo"), quality=100)
hist(vals, breaks = 11, freq = FALSE, col = "grey", main='Histogram of snowfall', sub='Epanechnikovestimator', ylim=c(0,0.022), xlim=c(10, 140))
lines(density(vals, bw=3, kernel = "epanechnikov"), col = "red", lw=2)
lines(density(vals, bw=5, kernel = "epanechnikov"), col = "blue", lw=2)
lines(density(vals, bw="nrd0", kernel = "epanechnikov"), col = "green", lw=2)
legend(18, 0.021, legend=c("Standard", "bw = 5", "bw = 3"), col=c("green", "blue", "red"), lwd=3)
dev.off()
#Plot Histogramm, Gaussianschaetzer mit 3 Bandbreiten
jpeg(filename='output/snowfall_gausian.jpg', width=640, height=480, units = "px", type = c("windows", "cairo"), quality=100)
hist(vals, breaks = 11, freq = FALSE, col = "grey", main='Histogram of snowfall', sub='Gausianestimator', ylim=c(0,0.022), xlim=c(10, 140))
lines(density(vals, bw="nrd0", kernel = "gaussian"), col = "green", lw=2)
lines(density(vals, bw=5, kernel = "gaussian"), col = "blue", lw=2)
lines(density(vals, bw=3, kernel = "gaussian"), col = "red", lw=2)
legend(18, 0.021, legend=c("Standard", "bw = 5", "bw = 3"), col=c("green", "blue", "red"), lwd=3)
jpeg(filename='output/snowfall_gausian.jpg', width=640, height=480, units = "px", type = c("windows", "cairo"), quality=100)
hist(vals, breaks = 11, freq = FALSE, col = "grey", main='Histogram of snowfall', sub='Gausianestimator', ylim=c(0,0.022), xlim=c(10, 140))
lines(density(vals, bw="nrd0", kernel = "gaussian"), col = "green", lw=2)
lines(density(vals, bw=5, kernel = "gaussian"), col = "blue", lw=2)
lines(density(vals, bw=3, kernel = "gaussian"), col = "red", lw=2)
lines(density(vals, bw=5, kernel = "gaussian"), col = "blue", lw=2)
lines(density(vals, bw=3, kernel = "gaussian"), col = "red", lw=2)
legend(18, 0.021, legend=c("Standard", "bw = 5", "bw = 3"), col=c("green", "blue", "red"), lwd=3)
dev.off()
#Test auf Normalverteilung mit Shapiro-Wilk Test
shapiro.test(vals)
#Einbinden der library bmp
#install.packages("bmp")
library(bmp)
#install.packages("pixmap")
library(pixmap)
#install.packages("adimpro")
library(adimpro)
#Read noisyimage
prc <- pixmapGrey(read.bmp("noisyimage2.bmp"))
imageMatrix <- prc@grey
image <- make.image(imageMatrix)
show.image(image)
#Funktion zum Glaetten einer Matrix mit der Methode der naechsten Nachbarn im Umkreis mit Radius k
smooth2 <- function(vals,k){
#uniCircle <- c(0,0)
#umkreisj <- numeric(1)
uniI <- 0
uniJ <- 0
for(i in -k:k){
for(j in -k:k){
len <- max(abs(i),abs(j))#norm(c(i,j), type="2")
if(len <= k && len > 0)
{
#uniCircle <- cbind(uniCircle, c(i,j))
#umkreisj <- c(umkreisj,j)
uniI <- c(uniI, i)
uniJ <- c(uniJ, j)
}
}
}
newVals <- matrix(nrow = dim(vals)[1], ncol = dim(vals)[2])
for(i in 1:dim(vals)[1])
{
for(j in 1:dim(vals)[2])
{
circleI <- uniI+i
circleJ <- uniJ+j
list <- numeric(0)
for(k in 1:length(circleI))
{
if(circleI[k]>0 && circleJ[k]>0 && circleI[k]<=dim(vals)[1] && circleJ[k]<=dim(vals)[2]){
list <- c(list,vals[circleI[k],circleJ[k]])
}
}
newVals[i,j] <- mean(list)
}
}
newVals
}
newMatrix <- smooth2(imageMatrix,5)
#Read noisyimage
prc <- pixmapGrey(read.bmp("noisyimage.bmp"))
imageMatrix <- prc@grey
image <- make.image(imageMatrix)
show.image(image)
#Funktion zum Glaetten einer Matrix mit der Methode der naechsten Nachbarn im Umkreis mit Radius k
smooth2 <- function(vals,k){
#uniCircle <- c(0,0)
#umkreisj <- numeric(1)
uniI <- 0
uniJ <- 0
for(i in -k:k){
for(j in -k:k){
len <- max(abs(i),abs(j))#norm(c(i,j), type="2")
if(len <= k && len > 0)
{
#uniCircle <- cbind(uniCircle, c(i,j))
#umkreisj <- c(umkreisj,j)
uniI <- c(uniI, i)
uniJ <- c(uniJ, j)
}
}
}
newVals <- matrix(nrow = dim(vals)[1], ncol = dim(vals)[2])
for(i in 1:dim(vals)[1])
{
for(j in 1:dim(vals)[2])
{
circleI <- uniI+i
circleJ <- uniJ+j
list <- numeric(0)
for(k in 1:length(circleI))
{
if(circleI[k]>0 && circleJ[k]>0 && circleI[k]<=dim(vals)[1] && circleJ[k]<=dim(vals)[2]){
list <- c(list,vals[circleI[k],circleJ[k]])
}
}
newVals[i,j] <- mean(list)
}
}
newVals
}
newMatrix <- smooth2(imageMatrix,5)
newimg <- make.image(newMatrix)
show.image(newimg)
newMatrix <- smooth2(imageMatrix,3)
newimg <- make.image(newMatrix)
show.image(newimg)
smooth2 <- function(vals,k){
#uniCircle <- c(0,0)
#umkreisj <- numeric(1)
uniI <- 0
uniJ <- 0
for(i in -k:k){
for(j in -k:k){
len <- norm(c(i,j), type="2")#max(abs(i),abs(j))
if(len <= k && len > 0)
{
#uniCircle <- cbind(uniCircle, c(i,j))
#umkreisj <- c(umkreisj,j)
uniI <- c(uniI, i)
uniJ <- c(uniJ, j)
}
}
}
newVals <- matrix(nrow = dim(vals)[1], ncol = dim(vals)[2])
for(i in 1:dim(vals)[1])
{
for(j in 1:dim(vals)[2])
{
circleI <- uniI+i
circleJ <- uniJ+j
list <- numeric(0)
for(k in 1:length(circleI))
{
if(circleI[k]>0 && circleJ[k]>0 && circleI[k]<=dim(vals)[1] && circleJ[k]<=dim(vals)[2]){
list <- c(list,vals[circleI[k],circleJ[k]])
}
}
newVals[i,j] <- mean(list)
}
}
newVals
}
newMatrix <- smooth2(imageMatrix,8)
newMatrix <- smooth2(imageMatrix,8)
newimg <- make.image(newMatrix)
show.image(newimg)
newMatrix <- smooth2(imageMatrix,5)
newimg <- make.image(newMatrix)
show.image(newimg)
plot(ecdf(vals))
plot(ecdf(vals), main="ECDF of snowfall")
plot(ecdf(vals), main="ECDF of snowfall", sub="Snow per winter in Buffalo in inch")
plot(ecdf(vals), main="ECDF of snowfall", sub="Snow per winter(1910-73) in Buffalo in inch")
i
hi <- hist(vals, breaks = 11, plot=FALSE)
#Plot Histogramm, Epanechnikovschaetzer mit 3 Bandbreiten
jpeg(filename='output/snowfall_epach.jpg', width=640, height=480, units = "px", type = c("windows", "cairo"), quality=100)
hist(vals, breaks = 11, freq = FALSE, col = "grey", main='Histogram of snowfall', sub='Epanechnikovestimator', ylim=c(0,0.022), xlim=c(10, 140))
lines(density(vals, bw=3, kernel = "epanechnikov"), col = "red", lw=2)
lines(density(vals, bw=5, kernel = "epanechnikov"), col = "blue", lw=2)
lines(density(vals, bw="nrd0", kernel = "epanechnikov"), col = "green", lw=2)
legend(18, 0.021, legend=c("Standard", "bw = 5", "bw = 3"), col=c("green", "blue", "red"), lwd=3)
plot(ecdf(vals), main="ECDF of snowfall", sub="Snow per winter(1910-73) in Buffalo in inch")
plot(ecdf(vals), main="ECDF of snowfall in Buffalo", sub="Snow per winter(1910-73) in inch")
jpeg(filename='output/snowfall_epach.jpg', width=640, height=480, units = "px", type = c("windows", "cairo"), quality=100)
hist(vals, breaks = 11, freq = FALSE, col = "grey", main='Histogram of snowfall', sub='Epanechnikovestimator', ylim=c(0,0.022), xlim=c(10, 140))
lines(density(vals, bw=3, kernel = "epanechnikov"), col = "red", lw=2)
lines(density(vals, bw=5, kernel = "epanechnikov"), col = "blue", lw=2)
lines(density(vals, bw="nrd0", kernel = "epanechnikov"), col = "green", lw=2)
legend(18, 0.021, legend=c("Standard", "bw = 5", "bw = 3"), col=c("green", "blue", "red"), lwd=3)
#Plot Histogramm, Gaussianschaetzer mit 3 Bandbreiten
jpeg(filename='output/snowfall_gausian.jpg', width=640, height=480, units = "px", type = c("windows", "cairo"), quality=100)
hist(vals, breaks = 11, freq = FALSE, col = "grey", main='Histogram of snowfall', sub='Gausianestimator', ylim=c(0,0.022), xlim=c(10, 140))
lines(density(vals, bw="nrd0", kernel = "gaussian"), col = "green", lw=2)
lines(density(vals, bw=5, kernel = "gaussian"), col = "blue", lw=2)
lines(density(vals, bw=3, kernel = "gaussian"), col = "red", lw=2)
legend(18, 0.021, legend=c("Standard", "bw = 5", "bw = 3"), col=c("green", "blue", "red"), lwd=3)
shapiro.test(vals)
#Read noisysignal
signal <- scan('http://www.math.hu-berlin.de/~bibinger/Praktikum%202012/noisysignal.txt')
#Funktion zum Gl?tten eines Vektors mit der Methode der n?chsten 2k-Nachbarn
smooth <- function(k, vals){
newVals <- numeric(0)
for(i in 1:k){
newVals[i] <- mean(vals[0:(i+k)])
newVals[length(vals)-(i-1)] <- mean(vals[(length(vals)-(i-1)-k):length(vals)])
}
for(i in (k+1):(length(vals)-k)){
newVals[i] <- mean(vals[(i-k):(i+k)])
}
newVals
}
#Testen der Funktion
mean(signal[1:11])
plot(smooth(5, signal))
plot(signal)
mean(signal[1:11])
#Plotten des Signals
plot(signal)
#Plotten des geglätteten Signals
plot(smooth(5, signal))
plot(signal, main ="Verrauschtes Signal")
#Plotten des geglätteten Signals
plot(smooth(5, signal))
plot(signal, main ="Verrauschtes Signal")
#Plotten des geglätteten Signals
plot(smooth(5, signal))
plot(signal, main ="Verrauschtes Signal", sub="noisysignal.txt")
#Plotten des geglätteten Signals
plot(smooth(5, signal), main ="Geglättetes Signal", sub="noisysignal.txt")
plot(signal, main ="Verrauschtes Signal", sub="noisysignal.txt")
#Plotten des geglätteten Signals
plot(smooth(5, signal), main ="Geglättetes Signal", sub="noisysignal.txt")
plot(signal, main ="Verrauschtes Signal", sub="noisysignal.txt")
#Plotten des geglätteten Signals
plot(smooth(5, signal), main ="Geglättetes Signal", sub="noisysignal.txt")
plot(signal, main ="Verrauschtes Signal", sub="noisysignal.txt")
#Plotten des geglätteten Signals
plot(smooth(5, signal), main ="Geglättetes Signal", sub="noisysignal.txt")
plot(signal, main ="Verrauschtes Signal", sub="noisysignal.txt")
plot(signal, main ="Noisy Signal", sub="noisysignal.txt")
plot(signal, main ="Noisy Signal")
plot(smooth(5, signal), main ="Geglättetes Signal", sub="noisysignal.txt")
plot(smooth(5, signal), main ="Smoothed Signal")
plot(ecdf(vals), main="ECDF of snowfall in Buffalo", sub="Snow per winter(1910-73) in inch")
plot(ecdf(vals), main="ECDF of snowfall in Buffalo")
sub="Snow per winter(1910-73) in inch"
plot(ecdf(vals), main="ECDF of snowfall in Buffalo", sub="Snow per winter(1910-73) in inch")
plot(ecdf(vals), main="ECDF of snowfall in Buffalo", sub="Snow per winter(1910-73) in inch", xlabel="snow in inch")
plot(ecdf(vals), main="ECDF of snowfall in Buffalo", sub="Snow per winter(1910-73) in inch", xlab="snow in inch")
plot(ecdf(vals), main="ECDF of snowfall in Buffalo", sub="Winter from 1910 to 1973)", xlab="snow in inch")
plot(ecdf(vals), main="ECDF of snowfall in Buffalo", sub="Winters from 1910 to 1973)", xlab="snow in inch")
plot(ecdf(vals), main="ECDF of snowfall in Buffalo", sub="Winters from 1910 to 1973", xlab="snow in inch")
plot(ecdf(vals), main="ECDF of snowfall in Buffalo", sub="Winters from 1910 to 1973", xlab="Snow in inch")
